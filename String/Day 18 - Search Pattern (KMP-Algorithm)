//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class Solution {
  public:
  
  void constLps(string&pat,vector<int>&lps){
      //const of lps
      int len = 0;
      lps[0] = 0;  //const an array or pi table to store the longest prefix which is also suffix
        int i = 1;
        
      while(i < pat.length()){
          if(pat[i] == pat[len]){ // eg aaba  a==a
               len++;
               lps[i] = len;
               i++;
              
          }
          else{
              if(len != 0 ){
                  len = lps[len -1 ]; // shift the len by one 
              }
             else{
                 lps[i] = 0;
                 i++;
                 
             }
          }
      }
      
  }
    vector<int> search(string& pat, string& txt) {
        // code here
        int n = pat.length();
        int m = txt.length();
        vector<int>lps(n);
        vector<int>res;
        
        constLps(pat,lps);
        int i =0 ; // indx for txt
        int j = 0; // indx for pat
        while(i<m){
            if(txt[i] == pat[j]){
                i++;
                j++;
                
                if(j==n){
                    res.push_back(i-j);
                    j=lps[j-1];
                }
            }
            else{
                if(j != 0){
                    j = lps[j-1];
                 }   
                 else{
                        i++;
                    }
                }
            }
              return res;
        }

};


//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        string S, pat;
        cin >> S >> pat;
        Solution ob;
        vector<int> res = ob.search(pat, S);
        if (res.size() == 0)
            cout << "[]" << endl;
        else {
            for (int i : res)
                cout << i << " ";
            cout << endl;
        }
    }
    return 0;
}

// } Driver Code Ends
